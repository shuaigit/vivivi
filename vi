"**************************************************************************************
"*
"*                            Vundle Settings
"*
"**************************************************************************************
"cd .vim 
"mkdir bundle
"cd bundle
"git clone https://github.com/VundleVim/Vundle.vim.git
":PluginInstall 
":PluginClean
":PluginList
" 侦测文件类型，该Vundle使用新版本
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"使Vundle管理插件版本，必须
Plugin 'VundleVim/Vundle.vim'

"自动加载cscope
Plugin 'vim-scripts/autoload_cscope.vim'

" c/c++支持
Plugin 'octol/vim-cpp-enhanced-highlight'

" 代码块对齐用
Plugin 'vim-scripts/indentLine.vim'

"
Plugin 'msanders/snipmate.vim'

" 美化主题
Plugin 'nanotech/jellybeans.vim'
"Plugin 'morhetz/gruvbox'

" 文件搜索
Plugin 'kien/ctrlp.vim'
Plugin 'mileszs/ack.vim'

"文件目录树
Plugin 'scrooloose/nerdtree'

" 代码浏览
Plugin 'majutsushi/tagbar'

"状态栏
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

"
Plugin 'clones/vim-genutils'

" 代码补全
"Plugin 'eikenb/acp'
"Plugin 'Rip-Rip/clang_complete'
"Plugin 'vim-scripts/OmniCppComplete'
Plugin 'Valloric/YouCompleteMe'

"全局查找并替换
"Plugin 'dkprice/vim-easygrep'

"标记符号表
"Plugin 'vim-scripts/TaskList.vim'

"添加预编译头注释
"Plugin 'SirVer/ultisnips'

"语法高亮和编码风格检查
"Plugin 'vim-syntastic/syntastic'

"操作撤销与重做
"Plugin 'sjl/gundo.vim'

"唤醒VIM，快速进入编辑状态
"Plugin 'vim-scripts/sessionman.vim'

" 成对符号编辑
"Plugin 'tpope/vim-surround'
"Plugin 'tpope/vim-unimpaired'

" 自动对齐
Plugin 'godlygeek/tabular'

" 快速移动
"Plugin 'Lokaltog/vim-easymotion'

" 增强状态栏
"Plugin 'rstatusline'
"Plugin 'Lokaltog/vim-powerline'

" 快速注释
"Plugin 'scrooloose/nerdcommenter'
"Plugin 'tpope/vim-commentary'

"所有添加插件放置在上面
call vundle#end()

"使能插件
filetype plugin on                                              " 载入文件类型插件
filetype indent on                                              " 为特定文件类型载入相关缩进文件
"**************************************************************************************
"*
"*                            Common Settings
"*
"**************************************************************************************
set nu
syntax on
set ignorecase
set smartcase
set showmatch
set linebreak
set ruler
set incsearch
set hlsearch
autocmd InsertLeave * se nocul
autocmd InsertEnter * se cul
set foldenable
set foldmethod=manual
set confirm
"**************************************************************************************
"*
"*                            Indent and Tab
"*
"**************************************************************************************
set autoindent
set nosmartindent
set cindent
set nosmarttab
set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4
"**************************************************************************************
"*
"*                            Appearance
"*
"**************************************************************************************
set guifont="Courier 10 pitch:h10:cANSI"
let &titlestring = expand("%:p")
set notitle
set mouse=n
set t_Co=256
colorscheme jellybeans
"colorscheme gruvbox
set cursorline
"set cmdheight=2
"set list
"set lcs=tab:>-,eol:<,nbsp:%,trail:-
"**************************************************************************************
"*
"*                            Tab
"*
"**************************************************************************************
set showtabline=2
set tabpagemax=20
nmap tn :tabedit <C-R>=expand("%:p:h")<CR><CR>
nmap tN :tabedit<CR>
nmap tw :tabclose<CR>
nmap tc :tabedit <C-R>=expand("%")<CR><CR>
nmap <F2> :NERDTree<CR>
nmap <Tab> :tabnext<CR>
nmap <S-Tab> :tabprevious<CR>
"**************************************************************************************
"*
"*                            Plugin Indentline
"*
"**************************************************************************************
let g:indentLine_char='│'
"let g:indentLine_char=' '
let g:indentLine_color_term=235
let g:indentLine_concealcursor=''
"**************************************************************************************
"*
"*                            Convenient Mapping
"*
"**************************************************************************************
nmap <C-C> :cd <C-R>=expand("%:p:h")<CR><CR> 
nmap ,b :%!xxd<CR>
nmap ,B :%!xxd -r<CR>
nmap ,r :e!<CR>
"**************************************************************************************
"*
"*                            Scrren Size Control
"*
"**************************************************************************************
"Full screen toggle using F11
let s:fullsize = 0
function! ToggleFullScreen()
    let s:fullsize = winheight(0) < 5 ? 0 : 1
    if s:fullsize == 0
        exe "res"
    else
        exe "res 2"
    endif
endfunc
nmap <F11> :call ToggleFullScreen()<CR>
nmap <F12> <C-W>=
"**************************************************************************************
"*
"*                            Tabline
"*
"**************************************************************************************
" make tabline in terminal mode
function! Vim_NeatTabLine()
    let s = ''
    for i in range(tabpagenr('$'))
        " select the highlighting
        if i + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        " set the tab page number (for mouse clicks)
        " let s .= '[' . (i + 1) . ']' . '%' . (i + 1) . 'T'
        let s .= '%' . (i + 1) . 'T'
        " the label is made by MyTabLabel()
        let s .= '%{Vim_NeatTabLabel(' . (i + 1) . ')} '
    endfor
    " after the last tab fill with TabLineFill and reset tab page nr
    let s .= '%#TabLineFill#%T'
    " right-align the label to close the current tab page
    if tabpagenr('$') > 1
        let s .= '%=%#TabLine#%999XX'
    endif
    return s
endfunc
" get a single tab name 
function! Vim_NeatBuffer(bufnr, fullname)
    let l:name = bufname(a:bufnr)
    if getbufvar(a:bufnr, '&modifiable')
        if l:name == ''
            return '[No Name]'
        else
            if a:fullname 
                return fnamemodify(l:name, ':p')
            else
                return fnamemodify(l:name, ':t')
            endif
        endif
    else
        let l:buftype = getbufvar(a:bufnr, '&buftype')
        if l:buftype == 'quickfix'
            return '[Quickfix]'
        elseif l:name != ''
            if a:fullname 
                return '-'.fnamemodify(l:name, ':p')
            else
                return '-'.fnamemodify(l:name, ':t')
            endif
        else
        endif
        return '[No Name]'
    endif
endfunc
" get a single tab label
function! Vim_NeatTabLabel(n)
    let l:buflist = tabpagebuflist(a:n)
    let l:winnr = tabpagewinnr(a:n)
    let l:bufnr = l:buflist[l:winnr - 1]
    return Vim_NeatBuffer(l:bufnr, 0)
endfunc
" get a single tab label in gui
function! Vim_NeatGuiTabLabel()
    let l:num = v:lnum
    let l:buflist = tabpagebuflist(l:num)
    let l:winnr = tabpagewinnr(l:num)
    let l:bufnr = l:buflist[l:winnr - 1]
    return Vim_NeatBuffer(l:bufnr, 0)
endfunc
" setup new tabline, just like %M%t in macvim
set tabline=%!Vim_NeatTabLine()
set guitablabel=%{Vim_NeatGuiTabLabel()}
"**************************************************************************************
"*
"*                            Comment
"*
"**************************************************************************************
"autocmd FileType python,shell,coffee set commentstring=#\%s
"autocmd FileType java,c,cpp set commentstring=//\%s
"**************************************************************************************
"*
"*                            Taglist
"*
"**************************************************************************************
let Tlist_Ctags_cmd='ctags'
let Tlist_Use_Right_Window=1
let Tlist_Show_One_File=1
let Tlist_Process_File_Always=1
let Tlist_Exit_OnlyWindow=1
let Tlist_Auto_Open = 0
"nmap tl :Tlist<CR>
"**************************************************************************************
"*
"*                            YouCompleteMe
"*
"**************************************************************************************
"set nocp
"let g:clang_library_path='/usr/lib/llvm-3.9/lib'

set completeopt=longest,menu "让vim的补全菜单行为与一般IDE一致
let g:ycm_global_ycm_extra_conf='/home/liugx/.ycm_extra_conf.py'
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示
let g:ycm_collect_identifiers_from_tags_files=1 " 开启 YCM 基于标签引擎
let g:ycm_min_num_of_chars_for_completion=2 " 从第2个键入字符就开始罗列匹配项
let g:ycm_cache_omnifunc=0  " 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax=1    " 语法关键字补全
let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
let g:ycm_complete_in_strings = 1 "在字符串输入中也能补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0 "注释和字符串中的文字也会被收入补全
let g:ycm_allow_changing_updatetime=0
let g:ycm_show_diagnostics_ui=0
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>*'
"let g:ycm_key_list_select_completion = ['<Down>']
"let g:ycm_key_list_previous_completion = ['<Up>']

inoremap <expr> <C-j>       pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <C-k>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <CR>        pumvisible() ? "\<C-y>" : "\<CR>"
"inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
"inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
"inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
"inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
inoremap <leader><leader> <C-x><C-o>
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <F4> :YcmDiags<CR>
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
"nnoremap <leader>lo :lopen<CR> "open locationlist
"nnoremap <leader>lc :lclose<CR>    "close locationlist

autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式自动关闭预览窗口
"**************************************************************************************
"*
"*                            Cscope
"*
"**************************************************************************************
if has("cscope")
	set csprg=/usr/bin/cscope
	set csto=0
	set cst
	set nocsverb
	set csre
	set cscopequickfix=g-,s-,c-,d-,i-,t-,e-
	" add any database in current directory
	if filereadable("cscope.out")
		cs add cscope.out
	" else add database pointed to by environment
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif
	"set csverb
endif
" 0 or s: Find this C symbol
" 1 or g: Find this definition
" 2 or d: Find functions called by this function
" 3 or c: Find functions calling this function
" 4 or t: Find this text string
" 5 or e: Find this egrep pattern
" 6 or f: Find this file
" 7 or i: Find files #including this file
nmap fs :lcs find s <C-R>=expand("<cword>")<CR><CR><C-o>:lw<CR>
nmap fg :lcs find g <C-R>=expand("<cword>")<CR><CR><C-o>:lcl<CR>tn:lw<CR><CR>
nmap fd :lcs find d <C-R>=expand("<cword>")<CR><CR><C-o>:lw<CR>
nmap fc :lcs find c <C-R>=expand("<cword>")<CR><CR><C-o>:lw<CR>
nmap ft :lcs find t <C-R>=expand("<cword>")<CR><CR><C-o>:lw<CR>
nmap fe :lcs find e <C-R>=expand("<cword>")<CR><CR><C-o>:lw<CR>
nmap ff :lcs find f <C-R>=expand("<cfile>")<CR><CR><C-o>:lw<CR>
nmap fi :lcs find i ^<C-R>=expand("<cfile>")<CR>$<CR><C-o>:lw<CR>
"**************************************************************************************
"*
"*                            Vimgrep
"*
"**************************************************************************************
set grepprg=egrep
nmap fw :lgr -Enr --include="*.cpp" --include="*.c" --include="*.h" --exclude-dir="gen" --exclude-dir="Print4" --exclude-dir="opkgbuild" <C-R>=expand("<cword>")<CR><CR><C-o>:lw<CR>
nmap fW :lgr -Enr --include="*.cpp" --include="*.c" --include="*.h" --exclude-dir="gen" --exclude-dir="Print4" --exclude-dir="opkgbuild" <C-R>=expand("<cWORD>")<CR><CR><C-o>:lw<CR>
nmap fa :lgr -Enr --include="*.cpp" --include="*.c" --include="*.h" --include="*.js" --include="*.htm" --include="*.html" --include="*.xml" --include="*.css" --exclude-dir="gen" --exclude-dir="Print4" <C-R>=expand("<cword>")<CR><CR><C-o>:lw<CR>
nmap fA :lgr -Enr --exclude-dir="gen" <C-R>=expand("<cword>")<CR><CR><C-o>:lw<CR>
nmap ,w :lgr -Enr --include="*.cpp" --include="*.c" --include="*.h" --exclude-dir="gen" --exclude-dir="Print4" --exclude-dir="opkgbuild" <C-R>=expand("<cword>")<CR>
nmap ,W :lgr -Enr --include="*.cpp" --include="*.c" --include="*.h" --exclude-dir="gen" --exclude-dir="Print4" --exclude-dir="opkgbuild" "<C-R>=expand("<cWORD>")<CR>"
nmap ,s :%s/<C-R>=expand("<cword>")<CR>/
nmap ,S :%s/\<<C-R>=expand("<cword>")<CR>\>/
nmap ,a :lgr -Enr --include="*.cpp" --include="*.c" --include="*.h" --include="*.js" --include="*.htm" --include="*.html" --include="*.css" --exclude-dir="gen" --exclude-dir="Print4" --exclude-dir="opkgbuild" <C-R>=expand("<cword>")<CR>
nmap ,A :lgr -Enr --exclude-dir="Print4" --exclude-dir="gen" <C-R>=expand("<cword>")<CR>
"**************************************************************************************
"*
"*                            Tagbar
"*
"**************************************************************************************
let g:tagbar_autofocus=0
let g:tagbar_show_visibility = 1
let g:tagbar_show_linenumbers = 1
let g:tagbar_autoshowtag = 1
let g:tagbar_autopreview = 0
let g:tagbar_left = 1
nmap tb :TagbarToggle<CR>
nmap tj :TagbarOpen fj<CR>
"**************************************************************************************
"*
"*                            Ctrlp
"*
"**************************************************************************************
set wildignore+=*/opkgbuild/*,*/Print4/*
let g:ctrlp_working_path_mode = 0
let g:ctrlp_regexp = 1
let g:ctrlp_max_files = 20000
let g:ctrlp_max_depth = 40
"let g:ctrlp_tabpage_position= 'c'
"let g:ctrlp_working_path_mode = 'ra'
"let g:ctrlp_user_command = 'find %s -type f'       " MacOSX/Linux
"**************************************************************************************
"*
"*                            Airline
"*
"**************************************************************************************
set laststatus=2
let g:airline_theme='papercolor'
"**************************************************************************************
"*
"*                            NERDTree
"*
"**************************************************************************************
let g:NERDTreeDirArrows = 1
let g:NERDTreeIgnore=['cscope\.*', '\.*swp', '\.git*', 'comp_info.README', '\.repo', '\.comp_info']
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
let g:nerdtree_tabs_open_on_console_startup=1
let NERDTreeWinPos="right"
let NERDTreeMouseMode=1
"nmap Abortedtt :NERDTreeToggle <C-R>=expand("%:p:h")<CR><CR>
nmap tt :NERDTreeToggle <C-R>=expand("%")<CR><CR>
"**************************************************************************************
"*
"*                            C/C++ Comment Command
"*
"**************************************************************************************
function! ToggleCommentNBash()
	let l:str = getline(".")
	let l:pos = getpos(".")[1:2]
	exec "normal ^"
	let l:i = getpos(".")[2] - 1
	if str[l:i] == "#"
		exec "normal ^x"
		if l:pos[1] > l:i
	        let l:pos[1] -= 1
		endif
	else
		exec "normal ^i#"
		if l:pos[1] > l:i
	        let l:pos[1] += 1
		endif
	endif
	call cursor(l:pos)
endf
function! ToggleCommentV2Bash()
	let l:index  = line("'<")
	let l:end = line("'>")
	let l:pos = getpos(".")[1:2]
	let l:str = getline(index)
	
	call cursor(index, 1)
	exec "normal ^"
	let l:i = getpos(".")[2] - 1
    let l:doco = 0
    if str[l:i] == "#" 
	    let l:doco = 0
    else
	    let l:doco = 1
    endif
	if l:doco == 1
	    while l:index <= l:end
	    	call cursor(l:index, 1)
	    	exec "normal 0i#"
	    	let l:index += 1
	    endwhile
	else
	    while l:index <= l:end
	    	call cursor(l:index, 1)
	    	exec "normal ^x"
	    	let l:index += 1
	    endwhile
	endif
	call cursor(l:pos)
endf
nmap # :call g:ToggleCommentNBash()<CR>
vmap # :<CR>:call g:ToggleCommentV2Bash()<CR>
"**************************************************************************************
"*
"*                            C/C++ Comment Command
"*
"**************************************************************************************
function! ToggleCommentN()
	let l:str = getline(".")
	let l:pos = getpos(".")[1:2]
	exec "normal ^"
	let l:i = getpos(".")[2] - 1
	if str[l:i] == "/" && str[l:i+1] == "/"
		exec "normal ^xx"
		if l:pos[1] > l:i+2
	        let l:pos[1] -= 2
		else
		    let l:pos[1] = l:i - 1
		endif
	else
		exec "normal ^i//"
		if l:pos[1] > l:i
	        let l:pos[1] += 2
		else
	        let l:pos[1] = l:i + 3
		endif
	endif
	call cursor(l:pos)
endf
function! ToggleCommentV2()
	let l:index  = line("'<")
	let l:end = line("'>")
	let l:pos = getpos(".")[1:2]
	let l:str = getline(index)
	
	call cursor(index, 1)
	exec "normal ^"
	let l:i = getpos(".")[2] - 1
    let l:doco = 0
    if str[l:i] == "/" && str[l:i+1] == "/"
	    let l:doco = 0
    else
	    let l:doco = 1
    endif
	if l:doco == 1
	    while l:index <= l:end
	    	call cursor(l:index, 1)
	    	exec "normal 0i//"
	    	let l:index += 1
	    endwhile
	else
	    while l:index <= l:end
	    	call cursor(l:index, 1)
	    	exec "normal ^xx"
	    	let l:index += 1
	    endwhile
	endif
	call cursor(l:pos)
endf
nmap \\ :call g:ToggleCommentN()<CR>
vmap \\ :<CR>:call g:ToggleCommentV2()<CR>
"**************************************************************************************
"*
"*                            XmlPretty
"*
"**************************************************************************************
"nmap mm :call XmlPretty()<CR>
"**************************************************************************************
"*
"*                            Winmanager
"*
"**************************************************************************************
"let g:winManagerWindowLayout='FileExplorer'
"let g:persistentBehaviour=1
"let g:AutoOpenWinManager=1
"nmap wm :WMToggle<cr>
"**************************************************************************************
"*
"*                            Unite
"*
"**************************************************************************************
"nmap <F4> :Unite -start-insert file_rec<CR>
"call unite#filters#matcher_default#use(['matcher_regexp'])
"**************************************************************************************
"*
"*                            Lookupfile
"*
"**************************************************************************************
"(echo "!_TAG_FILE_SORTED	2	/2=foldcase/";(find . -type f -printf "%f\t%p\t1\n" | sort -f)) > ./lktags
"if filereadable("./lktags")
"	let g:LookupFile_TagExpr = string('./lktags')
"endif
"let g:LookupFile_UsingSpecializedTags = 0
"let g:LookupFile_FileFilter = '\.class$\|\.o$\|\.obj$\|\.exe$\|\.jar$\|\.zip$\|\.war$\|\.ear$\|\.dbo$\|\.cmd$\|\.dep$\|\.sib$\|\.debug$'
"let g:LookupFile_PreservePatternHistory = 1
"let g:LookupFile_MinPatLength = 2
"let g:LookupFile_PreserveLastPattern =0
"**************************************************************************************
"*
"*                            Personallize
"*
"**************************************************************************************
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l

"nmap <F3> :cp<CR>
"nmap <F4> :cn<CR>
"nmap <F5> :cw<CR>
"nmap <F6> :cclose<CR>

"**************************************************************************************
"*
"*                           Auto-complete 
"*
"**************************************************************************************
inoremap ' ''<ESC>i
inoremap " ""<ESC>i
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
"inoremap { {}<ESC>i
inoremap { {<CR>}<ESC>O
"inoremap < <><ESC>i

" 定义跳出括号函数，用于跳出括号
function! SkipPair()
    if getline('.')[col('.') - 1] == ']' || getline('.')[col('.') - 1] == '"' || getline('.')[col('.') - 1] == ')'
        return "\<ESC>la"
    else
        return "\t"
    endif
endf
" 将tab键绑定为跳出括号
"inoremap ,, <c-r>=SkipPair()<CR>
